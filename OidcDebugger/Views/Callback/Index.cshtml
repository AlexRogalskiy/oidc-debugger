@model OidcDebugger.ViewModels.DebugViewModel

@{
    ViewData["Title"] = "Debug";
}

@Html.Partial("_ServerInfo")

<div class="container debug__callback" id="debug-view-component"> 

    <div class="debug__callback-header" v-if="success">
        <h1 class="green-text">
            <i class="fa fa-check-circle" aria-hidden="true"></i>
            <b>Success!</b>
        </h1>
        <h2 class="h4-responsive">
            Lorem Ipsum Bacon Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sagittis pellentesque lacus eleifend lacinia
        </h2>
    </div>

    <div class="debug__callback-header" v-if="!success">
        <h1 class="red-text">
            <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
            <b>Error</b>
        </h1>
        <h2 class="h4-responsive">
            Lorem Ipsum Bacon Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sagittis pellentesque lacus eleifend lacinia
        </h2>
    </div>

    <div class="debug__callback-info" v-if="success">
        <h3 class="h5-responsive orange-text"><b>Exchange code for tokens</b></h3>
        <p>
            Now you need to exchange the code for tokens using the <span class="inline-code">/tokens</span> endpoint.
            We can't do this step for you because it involves your Client Secret.
        </p>
        <div class="card card-body code-block--small">
            <p class="card-text white-text">
                Sit iusto placerat ut.am ex idque tation, eu dicat mundi argumentum vel. <span class="light-blue-text">No option maluisset sit.</span> Ei quo timeam maluisset definitionem, prima iisque id ius, duo ex dignissim persequeris. Ut eos odio appetere sententiae.
            </p>
        </div>
    </div>

    <div class="debug__callback-info" v-if="success">
        <h3 class="h5-responsive orange-text"><b>Verify tokens</b></h3>
        <p>
            The returned tokens need to be verified to make sure they aren't forged.
            The <span class="inline-code">/introspect</span> endpoint can do this.
        </p>
        <div class="card card-body code-block--small">
            <p class="card-text white-text">
                Sit iusto placerat ut.am ex idque tation, eu dicat mundi argumentum vel. No option maluisset sit. Ei quo timeam maluisset definitionem, <span class="light-blue-text">No option maluisset sit.</span> prima iisque id ius, duo ex dignissim persequeris. Ut eos odio appetere sententiae.
            </p>
        </div>
    </div>

    <button type="button" class="btn btn-amber">
        Show the raw request details
    </button>

    <div class="jumbotron">
        <div>
            <b>Method:</b> {{method}}
        </div>
        
        <div v-show="code">
            <b>Code:</b> {{code}}
        </div>

        <div v-show="state">
            <b>State:</b> {{state}}
        </div>

        <div v-show="error">
            <div><b>Error:</b> {{error}}</div>
            <div><b>Description:</b> {{errorDescription}}</div>
        </div>

        <div>
            <p>Raw query values:</p>

            <code>
                <template v-for="param in query">
                    {{param.name}}={{param.value}}
                </template>
            </code>
        </div>

        <div id="rawFragmentSection" class="hidden">
            <p>Raw fragment values:</p>

            <div id="rawFragmentParent"></div>
        </div>

        <div id="rawFormSection" class="hidden">
            <p>Raw form body values:</p>

            <div id="rawFormParent"></div>
        </div>
    </div>
</div>

<environment names="Development">
    <script src="~/js/debug.js"></script>
</environment>
<environment names="Staging,Production">
    <script src="~/js/debug.min.js" asp-append-version="true"></script>
</environment>
